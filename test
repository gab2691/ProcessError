import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Value;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class FileServiceTest {

    @InjectMocks
    private FileService fileService;

    @Value("${directory.map-links-file}")
    private String mapPath;

    @Value("${GIT_REPO_PATH:C:\\Users\\T734536\\OneDrive - Santander Office 365\\Documents\\Workspace\\MDrepo\\docs\\docs}")
    private String directoryFile;

    @Value("${directory.treeView-file}")
    private String treeViewFile;

    @Test
    void saveFile_SuccessfullySavesFile() throws Exception {
        String data = "test data";
        String path = "/test/path";
        String fileName = "testFile";

        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            fileService.saveFile(data, path, fileName);

            mockedFiles.verify(() -> Files.write(any(Path.class), eq(data.getBytes(StandardCharsets.UTF_8))), times(1));
        }
    }

    @Test
    void saveFile_ThrowsSaveFileException() {
        String data = "test data";
        String path = "/test/path";
        String fileName = "testFile";

        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            mockedFiles.when(() -> Files.write(any(Path.class), any(byte[].class)))
                       .thenThrow(IOException.class);

            assertThrows(SaveFileException.class, () -> fileService.saveFile(data, path, fileName));
        }
    }
}
