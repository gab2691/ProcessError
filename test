package com.santander.documentaction.service;

import com.santander.documentaction.exception.LocalRepoException;
import jakarta.annotation.PostConstruct;
import java.io.File;
import java.io.IOException;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class JGitService {

    @Value("${gitLab.remote-repo}")
    private String remoteRepo;

    @Value("${GIT_REPO_PATH:C:\\Users\\T734536\\OneDrive - Santander Office 365\\Documents\\Workspace\\MDrepo\\docs}")
    private String localRepo;
    private String user = "t734536";
    private String pass = "Gbb0921@";
    private final Logger looger = LoggerFactory.getLogger(JGitService.class);

    public void injectRepo(String repo) {
        this.localRepo = repo;
    }

    @PostConstruct
    public void postConstrucut(){
        initRepo();
    }

    public void initRepo() {
        File repo = new File(localRepo);
        if (!new File(localRepo + "/.git").exists()) {
            try {
                UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider = new UsernamePasswordCredentialsProvider(
                    user, pass);
                looger.info("Cloning repository to: {}", localRepo);
                Git.cloneRepository()
                    .setURI(remoteRepo)
                    .setCredentialsProvider(usernamePasswordCredentialsProvider)
                    .setDirectory(repo)
                    .call();
                looger.info("Repository cloned successfully");
            } catch (GitAPIException e){
                looger.error("Could not clone repository. Exception: {}", e.getMessage(), e);
                throw new LocalRepoException("Repository initialization failed", e);
            }
        } else looger.info("Repository already exists: {}", localRepo);
    }

    public void updateLocalRepo() {
        try {
            looger.info("Starting Update Local repo: " + localRepo);
            Repository local = new FileRepositoryBuilder().setGitDir(new File(localRepo + "/.git"))
                .build();

            UsernamePasswordCredentialsProvider usernamePasswordCredentialsProvider = new UsernamePasswordCredentialsProvider(
                user, pass);

            new Git(local).pull()
                .setRemoteBranchName("master")
                .setCredentialsProvider(usernamePasswordCredentialsProvider)
                .call();
            looger.info("Updating Complete");
        } catch (GitAPIException | IOException e) {
            throw new LocalRepoException(
                "Error tryng update local repo: " + localRepo + " " + e.getMessage(), e);
        }
    }

    public void pushDocs() {
        looger.info("Starting push Changes");
        try (Git git = Git.open((new File(localRepo)))) {
            git.add()
                .addFilepattern(".").call();

            git.commit()
                .setAll(true)
                .setMessage("Update repo from doc imported by confluence").call();

            git.push()
                .setRemote(
                    remoteRepo)
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider(user, pass))
                .setForce(true)
                .call();

            looger.info("Complete pushing DOCs");
        } catch (Exception e) {
            throw new LocalRepoException("Error tring pushing DOCs: " + e.getCause(), e);
        }
    }
}
