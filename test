import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;

import java.io.File;
import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class JGitServiceTest {

    @InjectMocks
    private JGitService jGitService;

    @Mock
    private Git git;

    @Mock
    private Repository repository;

    @Mock
    private Logger logger;

    // Substitua estes com os valores apropriados conforme necessário
    @Value("${gitLab.remote-repo}")
    private String remoteRepo;

    @Value("${GIT_REPO_PATH:C:\\Users\\YourPath\\Documents\\Workspace\\Repo\\docs}")
    private String localRepo;

    @BeforeEach
    void setUp() throws IOException, GitAPIException {
        // Configuração do mock para Git.open
        when(Git.open(any(File.class))).thenReturn(git);

        // Configuração do mock para new FileRepositoryBuilder().setGitDir(...).build()
        when(new FileRepositoryBuilder().setGitDir(any(File.class)).build()).thenReturn(repository);
        
        // Mock para evitar qualquer ação real na chamada de cloneRepository
        Git mockGit = mock(Git.class);
        when(Git.cloneRepository()).thenReturn(mock(Git.CloneCommand.class));
        when(Git.cloneRepository().call()).thenReturn(mockGit);
    }

    @Test
    public void testInitRepoWithoutException() {
        assertDoesNotThrow(() -> jGitService.initRepo());
        verify(logger, atLeastOnce()).info(anyString());
    }

    @Test
    public void testPushDocsWithoutException() throws GitAPIException {
        // Mock necessário para o commit e push
        when(git.add()).thenReturn(mock(Git.AddCommand.class));
        when(git.commit()).thenReturn(mock(Git.CommitCommand.class));
        when(git.push()).thenReturn(mock(Git.PushCommand.class));

        assertDoesNotThrow(() -> jGitService.pushDocs());
        verify(git, times(1)).add();
        verify(git, times(1)).commit();
        verify(git, times(1)).push();
        verify(logger, atLeastOnce()).info("Starting push Changes");
    }
}
