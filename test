import org.mapstruct.AfterMapping;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import org.mapstruct.factory.Mappers;
import java.util.Collections;

@Mapper
public interface ChatRequestToRAGMapper {

    ChatRequestToRAGMapper INSTANCE = Mappers.getMapper(ChatRequestToRAGMapper.class);

    // Método para criar o RequestRAGDTO com valores padrão
    RequestRAGDTO toRequestRAGDTO(ChatRequestDTO chatRequestDTO);

    // Usando AfterMapping para preencher os campos que requerem valores fixos ou padrão
    @AfterMapping
    default void fillInDefaults(@MappingTarget RequestRAGDTO requestRAGDTO, ChatRequestDTO chatRequestDTO) {
        RequestRAGDTO.MessageDTO messageDTO = new RequestRAGDTO.MessageDTO(chatRequestDTO.getContent(), "user");
        requestRAGDTO.setMessage(Collections.singletonList(messageDTO));
        
        RequestRAGDTO.ContextDTO contextDTO = new RequestRAGDTO.ContextDTO();
        RequestRAGDTO.ContextDTO.OverridesDTO overridesDTO = new RequestRAGDTO.ContextDTO.OverridesDTO(6, "azure", true);
        contextDTO.setOverrides(overridesDTO);
        requestRAGDTO.setContext(contextDTO);

        requestRAGDTO.setStream(true);
        // O campo "team" é mapeado diretamente do ChatRequestDTO e não necessita de ajustes adicionais aqui
    }
}
