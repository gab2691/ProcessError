import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.io.ClassPathResource;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class FileServiceTest {

    private FileService fileService;

    @Mock
    private ClassPathResource mockResource;

    @BeforeEach
    void setUp() throws Exception {
        fileService = new FileService(); // Assume que FileService não é abstrato aqui
        String jsonContent = "{\"key\": \"value\"}";
        InputStream inputStream = new ByteArrayInputStream(jsonContent.getBytes(StandardCharsets.UTF_8));

        when(mockResource.exists()).thenReturn(true);
        when(mockResource.getInputStream()).thenReturn(inputStream);

        // Injeta o mockResource no fileService
        ReflectionTestUtils.setField(fileService, "resource", mockResource);
    }

    @Test
    void init_FileExists_MapFileIsLoaded() {
        fileService.init();
        assertNotNull(fileService.getMapFile());
        assertFalse(fileService.getMapFile().isEmpty());
        assertEquals("value", fileService.getMapFile().get("key"));
    }
}
