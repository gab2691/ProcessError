import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.IOException;

@Service
public class JGitService {

    @Value("${gitLab.remote-repo}")
    private String remoteRepo;

    @Value("${GIT_REPO_PATH}")
    private String localRepo;
    
    private String user = "t734536";
    private String pass = "Gbb0921@";
    
    private final Logger logger = LoggerFactory.getLogger(JGitService.class);

    // Dependências que serão mockadas nos testes
    private GitFactory gitFactory;

    public JGitService(GitFactory gitFactory) {
        this.gitFactory = gitFactory;
    }

    public void injectRepo(String repo) {
        this.localRepo = repo;
    }

    @PostConstruct
    public void postConstruct() {
        initRepo();
    }

    public void initRepo() {
        File repo = new File(localRepo);
        if (!repo.exists() || !new File(localRepo, ".git").exists()) {
            try {
                UsernamePasswordCredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider(user, pass);
                logger.info("Cloning repository to: {}", localRepo);
                gitFactory.cloneRepository()
                           .setURI(remoteRepo)
                           .setCredentialsProvider(credentialsProvider)
                           .setDirectory(repo)
                           .call();
                logger.info("Repository cloned successfully");
            } catch (GitAPIException e) {
                logger.error("Could not clone repository. Exception: {}", e.getMessage(), e);
                throw new LocalRepoException("Repository initialization failed", e);
            }
        } else {
            logger.info("Repository already exists: {}", localRepo);
        }
    }

    // Os outros métodos permanecem inalterados
}
public interface GitFactory {
    Git cloneRepository() throws GitAPIException;
    Git open(File repoDirectory) throws IOException;
}

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mockito;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.eclipse.jgit.api.Git;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class JGitServiceTest {

    @Mock
    private GitFactory gitFactory;

    @InjectMocks
    private JGitService jGitService;

    @Mock
    private Git git;

    @BeforeEach
    void setUp() throws Exception {
        when(gitFactory.open(any(File.class))).thenReturn(git);
    }

    @Test
    void testUpdateLocalRepo() throws Exception {
        // Mocking detailed behaviors of Git commands...
        jGitService.updateLocalRepo();
        // Assertions and verifications...
    }

    @Test
    void testPushDocs() throws Exception {
        // Mocking detailed behaviors of Git commands...
        jGitService.pushDocs();
        // Assertions and verifications...
    }
}

